{"ast":null,"code":"import { PRODUCT_RECORD_REQUEST, PRODUCT_RECORD_SUCCESS, PRODUCT_RECORD_FAIL, RECORD_SAVE_REQUEST, RECORD_SAVE_SUCCESS, RECORD_SAVE_FAIL } from '../constants/recordConstants';\nimport axios from 'axios';\n\nconst listRecords = () => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_RECORD_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/records');\n    dispatch({\n      type: PRODUCT_RECORD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_RECORD_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveRecord = records => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: RECORD_SAVE_REQUEST,\n      payload: records\n    });\n\n    if (!records.name) {\n      const {\n        data\n      } = await axios.post('/api/records', records);\n      dispatch({\n        type: RECORD_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await axios.put('/api/records/' + records.name, records);\n      dispatch({\n        type: RECORD_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: RECORD_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { saveRecord, listRecords };","map":{"version":3,"sources":["C:/Users/USER/Desktop/shop-online/frontend/src/actions/recordActions.js"],"names":["PRODUCT_RECORD_REQUEST","PRODUCT_RECORD_SUCCESS","PRODUCT_RECORD_FAIL","RECORD_SAVE_REQUEST","RECORD_SAVE_SUCCESS","RECORD_SAVE_FAIL","axios","listRecords","dispatch","type","data","get","payload","error","message","saveRecord","records","getState","name","post","put"],"mappings":"AAAA,SACIA,sBADJ,EAEIC,sBAFJ,EAGIC,mBAHJ,EAIIC,mBAJJ,EAKIC,mBALJ,EAMIC,gBANJ,QAOS,8BAPT;AAQE,OAAOC,KAAP,MAAkB,OAAlB;;AAIA,MAAMC,WAAW,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC5C,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAW,MAAMJ,KAAK,CAACK,GAAN,CACrB,cADqB,CAAvB;AAGAH,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,sBAAR;AAAgCW,MAAAA,OAAO,EAAEF;AAAzC,KAAD,CAAR;AACD,GAND,CAME,OAAOG,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,mBAAR;AAA6BU,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAA5C,KAAD,CAAR;AACD;AACF,CAVD;;AAWA,MAAMC,UAAU,GAAIC,OAAD,IAAa,OAAOR,QAAP,EAAiBS,QAAjB,KAA8B;AAC5D,MAAI;AACFT,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,mBAAR;AAA6BS,MAAAA,OAAO,EAAEI;AAAtC,KAAD,CAAR;;AACA,QAAI,CAACA,OAAO,CAACE,IAAb,EAAmB;AACjB,YAAM;AAAER,QAAAA;AAAF,UAAW,MAAMJ,KAAK,CAACa,IAAN,CAAW,cAAX,EAA2BH,OAA3B,CAAvB;AACAR,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEL,mBAAR;AAA6BQ,QAAAA,OAAO,EAAEF;AAAtC,OAAD,CAAR;AACD,KAHD,MAGO;AACL,YAAM;AAAEA,QAAAA;AAAF,UAAW,MAAMJ,KAAK,CAACc,GAAN,CACrB,kBAAkBJ,OAAO,CAACE,IADL,EACUF,OADV,CAAvB;AAEAR,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEL,mBAAR;AAA6BQ,QAAAA,OAAO,EAAEF;AAAtC,OAAD,CAAR;AACD;AACF,GAVD,CAUE,OAAOG,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,gBAAR;AAA0BO,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAAzC,KAAD,CAAR;AACD;AACF,CAdD;;AAkBA,SACEC,UADF,EAEER,WAFF","sourcesContent":["import {\r\n    PRODUCT_RECORD_REQUEST,\r\n    PRODUCT_RECORD_SUCCESS,\r\n    PRODUCT_RECORD_FAIL,\r\n    RECORD_SAVE_REQUEST,\r\n    RECORD_SAVE_SUCCESS,\r\n    RECORD_SAVE_FAIL,\r\n  } from '../constants/recordConstants';\r\n  import axios from 'axios';\r\n  \r\n  \r\n  \r\n  const listRecords = () => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: PRODUCT_RECORD_REQUEST });\r\n      const { data } = await axios.get(\r\n        '/api/records'\r\n      );\r\n      dispatch({ type: PRODUCT_RECORD_SUCCESS, payload: data });\r\n    } catch (error) {\r\n      dispatch({ type: PRODUCT_RECORD_FAIL, payload: error.message });\r\n    }\r\n  };\r\n  const saveRecord = (records) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: RECORD_SAVE_REQUEST, payload: records });\r\n      if (!records.name) {\r\n        const { data } = await axios.post('/api/records', records);\r\n        dispatch({ type: RECORD_SAVE_SUCCESS, payload: data });\r\n      } else {\r\n        const { data } = await axios.put(\r\n          '/api/records/' + records.name,records);\r\n        dispatch({ type: RECORD_SAVE_SUCCESS, payload: data });\r\n      }\r\n    } catch (error) {\r\n      dispatch({ type: RECORD_SAVE_FAIL, payload: error.message });\r\n    }\r\n  };\r\n  \r\n\r\n\r\n  export {\r\n    saveRecord,\r\n    listRecords,\r\n  };"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL } from '../constants/productConstants';\nimport axios from 'axios';\n\nconst listProducts = () => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"/api/products\");\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: err.message\n    });\n  }\n};\n\nconst saveProduct = product => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: product\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n\n    if (!product._id) {\n      const {\n        data\n      } = await Axios.post('/api/products', product, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await Axios.put('/api/products/' + product._id, product, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsProduct = productId => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get(\"/api/products/\" + productId);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: err.message\n    });\n  }\n};\n\nexport { listProducts, detailsProduct, saveProduct };","map":{"version":3,"sources":["C:/Users/USER/Desktop/shop-online/frontend/src/actions/productActions.js"],"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","axios","listProducts","dispatch","type","data","get","payload","err","message","saveProduct","product","getState","PRODUCT_SAVE_REQUEST","userSignin","userInfo","_id","Axios","post","headers","Authorization","token","PRODUCT_SAVE_SUCCESS","put","error","PRODUCT_SAVE_FAIL","detailsProduct","productId"],"mappings":"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","sourcesContent":["import {PRODUCT_LIST_REQUEST,PRODUCT_LIST_SUCCESS,PRODUCT_LIST_FAIL, \r\n    PRODUCT_DETAILS_REQUEST,PRODUCT_DETAILS_SUCCESS,PRODUCT_DETAILS_FAIL\r\n\r\n} from '../constants/productConstants'\r\nimport axios from 'axios';\r\nconst listProducts = ()=> async(dispatch)=>{\r\n    try{\r\n        dispatch({type:PRODUCT_LIST_REQUEST});\r\n        const {data} = await axios.get(\"/api/products\");\r\n        dispatch({type:PRODUCT_LIST_SUCCESS, payload:data});\r\n    }\r\n    catch(err){\r\n        dispatch({type:PRODUCT_LIST_FAIL, payload: err.message});\r\n    }\r\n}\r\nconst saveProduct = (product) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: PRODUCT_SAVE_REQUEST, payload: product });\r\n      const {\r\n        userSignin: { userInfo },\r\n      } = getState();\r\n      if (!product._id) {\r\n        const { data } = await Axios.post('/api/products', product, {\r\n          headers: {\r\n            Authorization: 'Bearer ' + userInfo.token,\r\n          },\r\n        });\r\n        dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\r\n      } else {\r\n        const { data } = await Axios.put(\r\n          '/api/products/' + product._id,\r\n          product,\r\n          {\r\n            headers: {\r\n              Authorization: 'Bearer ' + userInfo.token,\r\n            },\r\n          }\r\n        );\r\n        dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\r\n      }\r\n    } catch (error) {\r\n      dispatch({ type: PRODUCT_SAVE_FAIL, payload: error.message });\r\n    }\r\n  };\r\nconst detailsProduct = (productId) => async(dispatch) => {\r\n    try{\r\n        dispatch({type:PRODUCT_DETAILS_REQUEST, payload: productId});\r\n        const {data} = await axios.get(\"/api/products/\"+ productId);\r\n        dispatch({type: PRODUCT_DETAILS_SUCCESS, payload: data});\r\n    }catch(err){\r\n        dispatch({type: PRODUCT_DETAILS_FAIL, payload: err.message});\r\n    }\r\n}\r\nexport {listProducts, detailsProduct, saveProduct}"]},"metadata":{},"sourceType":"module"}
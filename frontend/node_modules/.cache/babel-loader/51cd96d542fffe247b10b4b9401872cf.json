{"ast":null,"code":"import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_SAVE_REQUEST, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL, PRODUCT_DELETE_SUCCESS, PRODUCT_DELETE_FAIL, PRODUCT_DELETE_REQUEST, PRODUCT_REVIEW_SAVE_REQUEST, PRODUCT_REVIEW_SAVE_FAIL, PRODUCT_REVIEW_SAVE_SUCCESS } from '../constants/productConstants';\nimport axios from 'axios';\nimport Axios from 'axios';\n\nconst listProducts = (category = '', searchKeyword = '', sortOrder = '') => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/products?category=' + category + '&searchKeyword=' + searchKeyword + '&sortOrder=' + sortOrder);\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProduct = product => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: product\n    });\n    console.log('product: ' + product.price);\n\n    if (!product._id) {\n      const {\n        data\n      } = await Axios.post('/api/products', product);\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await Axios.put('/api/products/' + product._id, product);\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsProduct = productId => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get('/api/products/' + productId);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst deleteProduct = productId => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_DELETE_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.delete('/api/products/' + productId, {});\n    dispatch({\n      type: PRODUCT_DELETE_SUCCESS,\n      payload: data,\n      success: true\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DELETE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProductReview = (productId, review) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_REVIEW_SAVE_REQUEST,\n      payload: review\n    });\n    const {\n      data\n    } = await axios.post(`/api/products/${productId}/reviews`, review, {});\n    dispatch({\n      type: PRODUCT_REVIEW_SAVE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    // report error\n    dispatch({\n      type: PRODUCT_REVIEW_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listProducts, detailsProduct, saveProduct, deleteProduct, saveProductReview };","map":{"version":3,"sources":["C:/Users/USER/Desktop/shop-online/frontend/src/actions/productActions.js"],"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_SAVE_REQUEST","PRODUCT_SAVE_SUCCESS","PRODUCT_SAVE_FAIL","PRODUCT_DELETE_SUCCESS","PRODUCT_DELETE_FAIL","PRODUCT_DELETE_REQUEST","PRODUCT_REVIEW_SAVE_REQUEST","PRODUCT_REVIEW_SAVE_FAIL","PRODUCT_REVIEW_SAVE_SUCCESS","axios","Axios","listProducts","category","searchKeyword","sortOrder","dispatch","type","data","get","payload","error","message","saveProduct","product","getState","console","log","price","_id","post","put","detailsProduct","productId","deleteProduct","delete","success","saveProductReview","review"],"mappings":"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","sourcesContent":["import {\r\n  PRODUCT_LIST_REQUEST,\r\n  PRODUCT_LIST_SUCCESS,\r\n  PRODUCT_LIST_FAIL,\r\n  PRODUCT_DETAILS_REQUEST,\r\n  PRODUCT_DETAILS_SUCCESS,\r\n  PRODUCT_DETAILS_FAIL,\r\n  PRODUCT_SAVE_REQUEST,\r\n  PRODUCT_SAVE_SUCCESS,\r\n  PRODUCT_SAVE_FAIL,\r\n  PRODUCT_DELETE_SUCCESS,\r\n  PRODUCT_DELETE_FAIL,\r\n  PRODUCT_DELETE_REQUEST,\r\n  PRODUCT_REVIEW_SAVE_REQUEST,\r\n  PRODUCT_REVIEW_SAVE_FAIL,\r\n  PRODUCT_REVIEW_SAVE_SUCCESS,\r\n} from '../constants/productConstants';\r\nimport axios from 'axios';\r\nimport Axios from 'axios';\r\n\r\n\r\n\r\nconst listProducts = (\r\n  category = '',\r\n  searchKeyword = '',\r\n  sortOrder = ''\r\n) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: PRODUCT_LIST_REQUEST });\r\n    const { data } = await axios.get(\r\n      '/api/products?category=' +\r\n        category +\r\n        '&searchKeyword=' +\r\n        searchKeyword +\r\n        '&sortOrder=' +\r\n        sortOrder\r\n    );\r\n    dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: PRODUCT_LIST_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nconst saveProduct = (product) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: PRODUCT_SAVE_REQUEST, payload: product });\r\n    console.log('product: '+product.price);\r\n    if (!product._id) {\r\n      const { data } = await Axios.post('/api/products', product);\r\n      dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\r\n    } else {\r\n      const { data } = await Axios.put(\r\n        '/api/products/' + product._id,product);\r\n      dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\r\n    }\r\n  } catch (error) {\r\n    dispatch({ type: PRODUCT_SAVE_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nconst detailsProduct = (productId) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\r\n    const { data } = await axios.get('/api/products/' + productId);\r\n    dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: PRODUCT_DETAILS_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nconst deleteProduct = (productId) => async (dispatch, getState) => {\r\n  try {\r\n\r\n    dispatch({ type: PRODUCT_DELETE_REQUEST, payload: productId });\r\n    const { data } = await axios.delete('/api/products/' + productId, {\r\n\r\n    });\r\n    dispatch({ type: PRODUCT_DELETE_SUCCESS, payload: data, success: true });\r\n  } catch (error) {\r\n    dispatch({ type: PRODUCT_DELETE_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nconst saveProductReview = (productId, review) => async (dispatch, getState) => {\r\n  try {\r\n\r\n    dispatch({ type: PRODUCT_REVIEW_SAVE_REQUEST, payload: review });\r\n    const { data } = await axios.post(\r\n      `/api/products/${productId}/reviews`,\r\n      review,\r\n      {\r\n\r\n      }\r\n    );\r\n    dispatch({ type: PRODUCT_REVIEW_SAVE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    // report error\r\n    dispatch({ type: PRODUCT_REVIEW_SAVE_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nexport {\r\n  listProducts,\r\n  detailsProduct,\r\n  saveProduct,\r\n  deleteProduct,\r\n  saveProductReview,\r\n};"]},"metadata":{},"sourceType":"module"}